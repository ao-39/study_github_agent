name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  pull_request_target:
    branches: [main]
    types: [opened, synchronize, reopened]

jobs:
  ci:
    name: 継続的インテグレーション
    runs-on: ubuntu-latest
    permissions:
      issues: write
      pull-requests: write
      contents: read

    steps:
      - name: リポジトリのチェックアウト
        uses: actions/checkout@v4
        with:
          # pull_request_targetの場合、PRのコミットをチェックアウト
          # セキュリティ：安全なアクションのみ使用するため問題なし
          ref: ${{ github.event_name == 'pull_request_target' && github.event.pull_request.head.sha || github.sha }}
          
      - name: フォークPRの検出と安全性チェック
        id: fork-check
        run: |
          if [ "${{ github.event_name }}" = "pull_request_target" ]; then
            if [ "${{ github.event.pull_request.head.repo.full_name }}" != "${{ github.repository }}" ]; then
              echo "is_fork=true" >> $GITHUB_OUTPUT
              echo "🍴 フォークからのPRを検出しました"
            else
              echo "is_fork=false" >> $GITHUB_OUTPUT
              echo "📝 オリジナルリポジトリからのPRです"
            fi
          else
            echo "is_fork=false" >> $GITHUB_OUTPUT
            echo "🔄 通常のpush/PRイベントです"
          fi

      - name: Node.jsのセットアップ
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: pnpmのセットアップ
        uses: pnpm/action-setup@v4
        with:
          version: 10.11.0

      - name: pnpmストアディレクトリの取得
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: pnpmキャッシュの設定
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/package.json') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Turborepoキャッシュの設定
        uses: actions/cache@v4
        with:
          path: .turbo
          key: ${{ runner.os }}-turbo-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-turbo-

      - name: Playwrightブラウザキャッシュの設定
        uses: actions/cache@v4
        id: playwright-cache
        with:
          path: ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ hashFiles('**/package.json', '**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-playwright-

      - name: 依存関係のインストール
        run: pnpm install

      - name: リンティング
        run: pnpm lint

      - name: フォーマットチェック
        run: |
          pnpm exec turbo run lint:format
          pnpm run format:package --check

      - name: 型チェック
        run: pnpm type-check

      - name: ビルド
        run: pnpm build

      - name: ビルド成果物のArtifactsアップロード（PR時のみ・フォーク除外）
        if: github.event_name == 'pull_request' || (github.event_name == 'pull_request_target' && steps.fork-check.outputs.is_fork == 'false')
        uses: actions/upload-artifact@v4
        id: upload-artifacts
        with:
          name: build-artifacts-${{ github.event.pull_request.number }}
          path: apps/app/dist/
          retention-days: 14

      - name: PRにArtifactsダウンロードリンクをコメント（PR時のみ・フォーク除外）
        if: github.event_name == 'pull_request' || (github.event_name == 'pull_request_target' && steps.fork-check.outputs.is_fork == 'false')
        uses: peter-evans/create-or-update-comment@v4
        with:
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            ## 🚀 ビルド成果物をダウンロード

            PR #${{ github.event.pull_request.number }} のビルド成果物が準備できました！

            **📦 ダウンロードはこちら👉** [GitHub Actionsの実行ページ](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})

            **Artifactsセクションから以下のファイルをダウンロードできます：**
            - **ファイル名**: `build-artifacts-${{ github.event.pull_request.number }}`
            - **保存期間**: 14日間
            - **内容**: apps/appのビルド成果物（HTML、CSS、JavaScript）

            **📋 ダウンロード手順：**
            1. 上記のリンクをクリックしてActions実行ページを開く
            2. ページ下部の「Artifacts」セクションを確認
            3. `build-artifacts-${{ github.event.pull_request.number }}` ファイルをダウンロード

            ---
            *このコメントは自動で生成されました。レビュー時にビルド成果物をご確認ください。*

      - name: フォークPRの場合の通知
        if: github.event_name == 'pull_request_target' && steps.fork-check.outputs.is_fork == 'true'
        run: |
          echo "🍴 フォークからのPRのため、一部の機能（Artifactsアップロード・コメント投稿）がスキップされました"
          echo "✅ コード品質チェック（lint、build、test）は正常に実行されています"

      - name: Vitestユニットテスト実行
        run: pnpm exec turbo run test -- --passWithNoTests

      - name: Playwrightブラウザのインストール
        if: steps.playwright-cache.outputs.cache-hit != 'true'
        run: pnpm --filter app exec playwright install --with-deps chromium

      - name: E2Eテスト実行
        run: pnpm --filter app test:e2e:chromium