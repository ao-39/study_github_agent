name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  ci:
    name: 継続的インテグレーション
    runs-on: ubuntu-latest
    permissions:
      issues: write
      pull-requests: write
      contents: read

    steps:
      - name: リポジトリのチェックアウト
        uses: actions/checkout@v4

      - name: Node.jsのセットアップ
        uses: actions/setup-node@v4
        with:
          node-version: '24'

      - name: pnpmのセットアップ
        uses: pnpm/action-setup@v4
        with:
          version: 10.11.0

      - name: pnpmストアディレクトリの取得
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: pnpmキャッシュの設定
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/package.json') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Turborepoキャッシュの設定
        uses: actions/cache@v4
        with:
          path: .turbo
          key: ${{ runner.os }}-turbo-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-turbo-

      - name: Playwrightブラウザキャッシュの設定
        uses: actions/cache@v4
        id: playwright-cache
        with:
          path: ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ hashFiles('**/package.json', '**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-playwright-

      - name: 依存関係のインストール
        run: pnpm install

      - name: リンティング
        run: pnpm lint

      - name: フォーマットチェック
        run: |
          pnpm exec turbo run lint:format
          pnpm run format:package --check

      - name: 型チェック
        run: pnpm type-check

      - name: ビルド
        run: pnpm build

      - name: ビルド結果分析（PR時のみ）
        if: github.event_name == 'pull_request'
        id: build-analysis
        run: bash .github/scripts/build-analysis.sh

      - name: セキュリティ監査実行
        if: github.event_name == 'pull_request'
        id: audit
        run: bash .github/scripts/audit.sh

      - name: 古いパッケージ調査実行
        if: github.event_name == 'pull_request'
        id: outdated
        run: bash .github/scripts/outdated.sh

      - name: バンドル分析レポート生成（PR時のみ）
        if: github.event_name == 'pull_request'
        run: cd apps/app && ANALYZE=true pnpm vite build

      - name: ビルド成果物のArtifactsアップロード（PR時のみ）
        if: github.event_name == 'pull_request'
        uses: actions/upload-artifact@v4
        id: upload-artifacts
        with:
          name: build-artifacts-${{ github.event.pull_request.number }}
          path: apps/app/dist/
          retention-days: 14

      - name: バンドル分析レポートのArtifactsアップロード（PR時のみ）
        if: github.event_name == 'pull_request'
        uses: actions/upload-artifact@v4
        with:
          name: bundle-analysis-report-${{ github.event.pull_request.number }}
          path: apps/app/bundle-report.html
          retention-days: 14

      - name: PRにArtifactsダウンロードリンクをコメント（PR時のみ）
        if: github.event_name == 'pull_request'
        uses: peter-evans/create-or-update-comment@v4
        with:
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            ## 🚀 ビルド成果物をダウンロード

            PR #${{ github.event.pull_request.number }} のビルド成果物が準備できました！

            **📦 ダウンロードはこちら👉** [GitHub Actionsの実行ページ](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})

            <details>
            <summary>📦 Artifactsセクションから以下のファイルをダウンロードできます（クリックで展開）</summary>

            - **ビルド成果物**: `build-artifacts-${{ github.event.pull_request.number }}`
              - **内容**: apps/appのビルド成果物（HTML、CSS、JavaScript）
            - **📊 Vitestテストレポート**: `vitest-html-report-${{ github.event.pull_request.number }}`
              - **内容**: Vitestユニットテストの詳細HTMLレポート
            - **📈 バンドル分析レポート**: `bundle-analysis-report-${{ github.event.pull_request.number }}`
              - **内容**: JavaScriptバンドルサイズの詳細分析（rollup-plugin-visualizer）
            - **📚 TypeDoc APIドキュメント**: `typedoc-api-docs-${{ github.event.pull_request.number }}`
              - **内容**: TSDocコメントから自動生成されたAPIドキュメント（TypeDoc）
            - **🎭 Playwrightテストレポート**: `playwright-html-report-${{ github.event.pull_request.number }}`
              - **内容**: E2Eテスト（Playwright）の詳細HTMLレポート
            - **保存期間**: 14日間

            **📋 ダウンロード手順：**
            1. 上記のリンクをクリックしてActions実行ページを開く
            2. ページ下部の「Artifacts」セクションを確認
            3. 必要なファイルをダウンロード

            **📊 テストレポートについて：**
            - **Vitestレポート**: ユニットテストの実行結果、カバレッジ情報、実行時間、失敗詳細
            - **Playwrightレポート**: E2Eテストの実行結果、スクリーンショット、実行ログ、各ブラウザでの結果

            **📈 バンドル分析レポートについて：**
            バンドル分析レポートには以下の情報が含まれています：
            - JavaScriptファイルサイズの詳細分析
            - 依存関係のサイズ内訳（ライブラリ別）
            - ツリーマップによる視覚的なサイズ表示
            - gzip・brotli圧縮サイズの比較

            **📚 TypeDoc APIドキュメントについて：**
            TypeDoc APIドキュメントには以下の情報が含まれています：
            - TypeScriptソースコードのAPIリファレンス
            - TSDocコメントから自動生成された関数・クラス・型の説明
            - 使用例とコードサンプル
            - 型情報と継承関係の詳細

            </details>

            ## 📊 ビルド結果サマリー

            **📦 ビルドファイル統計**
            - **総ファイル数**: ${{ steps.build-analysis.outputs.total_files }}件
            - **総サイズ**: ${{ steps.build-analysis.outputs.total_size_formatted }}
            - **最大ファイル**: ${{ steps.build-analysis.outputs.max_file }} (${{ steps.build-analysis.outputs.max_size_formatted }})

            **📋 拡張子別ファイル数**
            ${{ steps.build-analysis.outputs.ext_counts }}

            <details>
            <summary>📄 ビルドファイル詳細一覧（クリックで展開）</summary>

            | ファイル名 | サイズ | パス |
            |-----------|----------------|------|
            ${{ steps.build-analysis.outputs.files_table }}

            </details>

            ---
            *このコメントは自動で生成されました。レビュー時にビルド成果物、テストレポート、バンドル分析レポートをご確認ください。*

      - name: セキュリティ監査結果を解析・準備
        if: github.event_name == 'pull_request'
        id: parse-audit
        env:
          AUDIT_RESULT: ${{ steps.audit.outputs.audit_result }}
        run: bash .github/scripts/parse-audit.sh

      - name: 古いパッケージ結果を解析・準備
        if: github.event_name == 'pull_request'
        id: parse-outdated
        env:
          OUTDATED_RESULT: ${{ steps.outdated.outputs.outdated_result }}
        run: bash .github/scripts/parse-outdated.sh

      - name: セキュリティ監査結果をPRにコメント（PR時のみ）
        if: github.event_name == 'pull_request'
        uses: peter-evans/create-or-update-comment@v4
        with:
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            ## 🔒 依存パッケージセキュリティ監査 & パッケージ更新状況

            PR #${{ github.event.pull_request.number }} のセキュリティ監査と依存パッケージの更新状況確認が完了しました！

            ### 📊 監査サマリー
            **📦 調査対象**: ${{ steps.parse-audit.outputs.total_deps }}件の依存パッケージ
            **🚨 検出された脆弱性**: ${{ steps.parse-audit.outputs.total_vulns }}件

            ### 📋 脆弱性レベル別詳細
            - 🔴 **Critical**: ${{ steps.parse-audit.outputs.critical }}件
            - 🟠 **High**: ${{ steps.parse-audit.outputs.high }}件  
            - 🟡 **Moderate**: ${{ steps.parse-audit.outputs.moderate }}件
            - 🔵 **Low**: ${{ steps.parse-audit.outputs.low }}件
            - ℹ️ **Info**: ${{ steps.parse-audit.outputs.info }}件

            ${{ steps.parse-audit.outputs.total_vulns == '0' && '✅ **セキュリティ問題は検出されませんでした！** 依存パッケージは安全です。' || '⚠️ **セキュリティ問題が検出されました。** 詳細は下記をご確認ください。' }}

            ### 📈 パッケージ更新状況
            **🔄 古いパッケージ**: ${{ steps.parse-outdated.outputs.outdated_count }}件

            ${{ steps.parse-outdated.outputs.outdated_count == '0' && '✅ **すべてのパッケージが最新です！** 更新が必要なパッケージはありません。' || '📦 **更新可能なパッケージがあります：** ' }}${{ steps.parse-outdated.outputs.outdated_count != '0' && steps.parse-outdated.outputs.outdated_packages || '' }}

            ${{ steps.parse-outdated.outputs.has_outdated == 'true' && '### 📋 古いパッケージの詳細

            <details>
            <summary>📄 詳細な更新情報（クリックで展開）</summary>

            ```json
            ' || '' }}${{ steps.parse-outdated.outputs.has_outdated == 'true' && steps.outdated.outputs.outdated_result || '' }}${{ steps.parse-outdated.outputs.has_outdated == 'true' && '```

            </details>

            ### 🛠️ パッケージ更新方法
            ```bash
            # 全パッケージの更新確認
            pnpm outdated

            # 特定のパッケージを更新
            pnpm update <package-name>

            # 全パッケージを安全に更新（セマンティックバージョニング範囲内）
            pnpm update
            ```' || '' }}

            ${{ steps.parse-audit.outputs.has_advisories == 'true' && '### 🔍 検出された脆弱性の詳細

            <details>
            <summary>📄 詳細なAdvisories情報（クリックで展開）</summary>

            ```json
            ' || '' }}${{ steps.parse-audit.outputs.has_advisories == 'true' && steps.audit.outputs.audit_result || '' }}${{ steps.parse-audit.outputs.has_advisories == 'true' && '```

            </details>

            ### 🛠️ 修復方法
            ```bash
            # 脆弱性を自動修復する場合
            pnpm audit --fix

            # 特定のCVEを無視する場合
            pnpm audit --ignore <CVE-ID>
            ```' || '' }}

            ### 💡 監査・更新チェックについて
            - **セキュリティ監査ツール**: pnpm audit
            - **パッケージ更新チェックツール**: pnpm outdated
            - **データソース**: npm security advisories, npm registry
            - **実行タイミング**: PR作成・更新時
            - **対象**: dependencies, devDependencies, optionalDependencies（全ワークスペース）

            ---
            *このセキュリティ監査・パッケージ更新状況レポートは自動で生成されました。重要な脆弱性が検出された場合は適切に対処し、古いパッケージがある場合は更新を検討してください。*

      - name: Vitestユニットテスト実行
        run: pnpm exec turbo run test -- --passWithNoTests

      - name: Vitestテスト結果を解析・準備（PR時のみ）
        if: github.event_name == 'pull_request'
        id: parse-vitest
        run: bash .github/scripts/parse-vitest.sh

      - name: Vitestテスト結果をPRにコメント（PR時のみ）
        if: github.event_name == 'pull_request' && steps.parse-vitest.outputs.json_exists == 'true'
        uses: peter-evans/create-or-update-comment@v4
        with:
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            ## 🧪 Vitestテスト結果サマリー

            PR #${{ github.event.pull_request.number }} のVitestユニットテスト実行が完了しました！

            ### 📊 テスト実行結果
            ${{ steps.parse-vitest.outputs.success == 'true' && '✅ **全てのテストが成功しました！**' || '❌ **テストに失敗があります**' }}

            **📈 テスト統計情報:**
            - 🧪 **実行テスト数**: ${{ steps.parse-vitest.outputs.total_tests }}件
            - ✅ **成功**: ${{ steps.parse-vitest.outputs.passed_tests }}件
            - ❌ **失敗**: ${{ steps.parse-vitest.outputs.failed_tests }}件
            - ⏳ **保留**: ${{ steps.parse-vitest.outputs.pending_tests }}件
            - 📝 **TODO**: ${{ steps.parse-vitest.outputs.todo_tests }}件

            **📂 テストスイート情報:**
            - 📁 **テストファイル数**: ${{ steps.parse-vitest.outputs.total_suites }}件
            - ✅ **成功ファイル**: ${{ steps.parse-vitest.outputs.passed_suites }}件
            - ❌ **失敗ファイル**: ${{ steps.parse-vitest.outputs.failed_suites }}件

            **⏱️ 実行時間**: ${{ steps.parse-vitest.outputs.duration_sec }}秒

            ${{ steps.parse-vitest.outputs.failed_tests != '0' && '### 🔍 失敗したテストの詳細' || '' }}
            ${{ steps.parse-vitest.outputs.failed_test_details }}

            <details>
            <summary>📋 詳細レポート（クリックで展開）</summary>

            **📊 詳細なテストレポートはこちら👉** [GitHub Actionsの実行ページ](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})

            **Artifactsセクションから以下のファイルをダウンロードできます：**
            - **📈 VitestHTMLレポート**: `vitest-html-report-${{ github.event.pull_request.number }}`
              - **内容**: テスト結果の詳細HTMLレポート、カバレッジ情報、実行時間詳細

            ### 💡 テストについて
            - **テストランナー**: Vitest v3.2.0
            - **カバレッジプロバイダー**: V8
            - **テスト環境**: jsdom
            - **実行タイミング**: PR作成・更新時

            </details>

            ---
            *このテスト結果レポートは自動で生成されました。失敗したテストがある場合は修正をお願いします。*

      - name: Vitestテストレポートの成果物アップロード（PR時のみ）
        if: github.event_name == 'pull_request'
        uses: actions/upload-artifact@v4
        with:
          name: vitest-html-report-${{ github.event.pull_request.number }}
          path: apps/app/test-results/
          retention-days: 14

      - name: TypeDocAPIドキュメント生成
        run: pnpm typedoc

      - name: TypeDocAPIドキュメントの成果物アップロード（PR時のみ）
        if: github.event_name == 'pull_request'
        uses: actions/upload-artifact@v4
        with:
          name: typedoc-api-docs-${{ github.event.pull_request.number }}
          path: apps/app/docs-api/
          retention-days: 14

      - name: Playwrightブラウザのインストール
        if: steps.playwright-cache.outputs.cache-hit != 'true'
        run: pnpm --filter app exec playwright install --with-deps chromium

      - name: E2Eテスト実行
        run: pnpm --filter app test:e2e:chromium

      - name: Playwrightテスト結果を解析・準備（PR時のみ）
        if: always() && github.event_name == 'pull_request'
        id: parse-playwright
        run: bash .github/scripts/parse-playwright.sh

      - name: Playwrightテスト結果をPRにコメント（PR時のみ）
        if: always() && github.event_name == 'pull_request' && steps.parse-playwright.outputs.json_exists == 'true'
        uses: peter-evans/create-or-update-comment@v4
        with:
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            ## 🎭 Playwrightテスト結果サマリー

            PR #${{ github.event.pull_request.number }} のPlaywright E2Eテスト実行が完了しました！

            ### 📊 テスト実行結果
            ${{ steps.parse-playwright.outputs.overall_success == 'true' && '✅ **全てのテストが成功しました！**' || '❌ **テストに失敗があります**' }}

            **📈 テスト統計情報:**
            - 🧪 **実行テスト数**: ${{ steps.parse-playwright.outputs.total_tests }}件
            - ✅ **成功**: ${{ steps.parse-playwright.outputs.passed_tests }}件
            - ❌ **失敗**: ${{ steps.parse-playwright.outputs.failed_tests }}件
            - 🔄 **不安定（Flaky）**: ${{ steps.parse-playwright.outputs.flaky_tests }}件
            - ⏭️ **スキップ**: ${{ steps.parse-playwright.outputs.skipped_tests }}件
            - 📊 **成功率**: ${{ steps.parse-playwright.outputs.success_rate }}%

            **⏱️ 実行時間**: ${{ steps.parse-playwright.outputs.duration_sec }}秒

            ${{ steps.parse-playwright.outputs.failed_tests != '0' && '### 🔍 失敗したテストの詳細' || '' }}
            ${{ steps.parse-playwright.outputs.failed_test_details }}

            <details>
            <summary><strong>📂 テストスイート情報</strong></summary>

            - 📁 **テストファイル数**: ${{ steps.parse-playwright.outputs.total_suites }}件
            - 🌐 **実行ブラウザ**: ${{ steps.parse-playwright.outputs.browser_info }}

            </details>

            <details>
            <summary><strong>📋 詳細レポート</strong></summary>

            **📊 詳細なテストレポートはこちら👉** [GitHub Actionsの実行ページ](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})

            **Artifactsセクションから以下のファイルをダウンロードできます：**
            - **🎭 PlaywrightHTMLレポート**: `playwright-html-report-${{ github.event.pull_request.number }}`
              - **内容**: E2Eテストの詳細HTMLレポート、スクリーンショット、実行ログ、各ブラウザでの結果

            </details>

            <details>
            <summary><strong>💡 E2Eテストについて</strong></summary>

            - **テストランナー**: Playwright
            - **実行ブラウザ**: Chromium（CI環境）
            - **テスト環境**: Vite開発サーバー (http://localhost:3000)
            - **実行タイミング**: PR作成・更新時
            - **テスト内容**: UI機能、レスポンシブ対応、ユーザーインタラクション

            </details>

            ---
            *このテスト結果レポートは自動で生成されました。失敗したテストがある場合は修正をお願いします。*

      - name: PlaywrightテストレポートのArtifactsアップロード（PR時のみ）
        if: always() && github.event_name == 'pull_request'
        uses: actions/upload-artifact@v4
        with:
          name: playwright-html-report-${{ github.event.pull_request.number }}
          path: apps/app/playwright-report/
          retention-days: 14